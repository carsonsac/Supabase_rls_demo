name: supabase-backup

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *" # Runs every day at midnight

env:
  BACKUP_ENABLED: true

jobs:
  run_db_backup:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
      BACKUP_ENABLED: ${{ vars.BACKUP_ENABLED }}
    
    steps:
      - name: Check if backups are enabled
        run: |
          if [ "$BACKUP_ENABLED" != "true" ]; then
            echo "::warning::Backups are disabled. Exiting workflow."
            exit 0
          fi

      - name: Verify environment variables
        if: env.BACKUP_ENABLED == 'true'
        run: |
          if [[ ! "$SUPABASE_DB_URL" == postgresql://* ]]; then
            echo "::error::Database URL has incorrect format"
            exit 1
          fi
          echo "Database URL has correct format"

      - name: Checkout repository
        if: env.BACKUP_ENABLED == 'true'
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0  # Fetch all history for proper Git operations

      - name: Generate timestamp
        id: timestamp
        run: echo "time=$(date +'%Y-%m-%d_%H-%M-%S')" >> $GITHUB_OUTPUT

      - name: Setup Supabase CLI
        if: env.BACKUP_ENABLED == 'true'
        uses: supabase/setup-cli@v1.5.0  # v1.5
        with:
          version: latest

      - name: Create backup directory
        if: env.BACKUP_ENABLED == 'true'
        run: mkdir -p prisma/backups/${{ steps.timestamp.outputs.time }}

      - name: Backup database
        if: env.BACKUP_ENABLED == 'true'
        run: |
          # Backup roles
          supabase db dump --db-url "$SUPABASE_DB_URL" \
            -f prisma/backups/${{ steps.timestamp.outputs.time }}/roles.sql --role-only

          # Backup schema
          supabase db dump --db-url "$SUPABASE_DB_URL" \
            -f prisma/backups/${{ steps.timestamp.outputs.time }}/schema.sql

          # Backup data
          supabase db dump --db-url "$SUPABASE_DB_URL" \
            -f prisma/backups/${{ steps.timestamp.outputs.time }}/data.sql --data-only --use-copy

      - name: Compress backups
        if: env.BACKUP_ENABLED == 'true'
        run: |
          cd prisma/backups
          tar -czf ${{ steps.timestamp.outputs.time }}.tar.gz ${{ steps.timestamp.outputs.time }}
          rm -rf ${{ steps.timestamp.outputs.time }}

      #Send to S3 bucket - not tested
      #------------------------------
      # - name: Configure AWS credentials
      #   if: env.BACKUP_ENABLED == 'true'
      #   uses: aws-actions/configure-aws-credentials@v4
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}
      
      # - name: Upload backup to S3
      #   if: env.BACKUP_ENABLED == 'true'
      #   run: |
      #     # Upload the latest backup to S3
      #     cd prisma/backups
      #     aws s3 cp ${{ steps.timestamp.outputs.time }}.tar.gz s3://${{ vars.S3_BUCKET_NAME }}/database-backups/${{ steps.timestamp.outputs.time }}.tar.gz
          
      #     # Optional: Add metadata
      #     aws s3api put-object-tagging --bucket ${{ vars.S3_BUCKET_NAME }} \
      #       --key database-backups/${{ steps.timestamp.outputs.time }}.tar.gz \
      #       --tagging 'TagSet=[{Key=backup-type,Value=supabase},{Key=created-by,Value=github-actions}]'
          
      #     echo "Backup uploaded to S3: s3://${{ vars.S3_BUCKET_NAME }}/database-backups/${{ steps.timestamp.outputs.time }}.tar.gz"   

      - name: Cleanup old backups
        if: env.BACKUP_ENABLED == 'true'
        run: |
          cd prisma/backups
          if ls *.tar.gz 1> /dev/null 2>&1; then
            ls -t *.tar.gz | tail -n +6 | xargs -r rm
          else
            echo "No backups to clean up"
          fi

      - name: Debug Git Status
        if: env.BACKUP_ENABLED == 'true'
        run: |
          cd prisma/backups
          ls -la  # List all files
          git status  # Check git status
          # Force Git to track the .tar.gz files
          git add -f *.tar.gz || echo "No files to add"   
          
      - name: Commit backups
        if: env.BACKUP_ENABLED == 'true'
        uses: stefanzweifel/git-auto-commit-action@v5.1.0
        with:
          commit_message: "Database Backup - ${{ steps.timestamp.outputs.time }}"
          file_pattern: 'prisma/backups/*.tar.gz'
          commit_options: '--no-verify'
          push_options: '--force'
          status_options: '--untracked-files=no'
          add_options: '-f'
          skip_checkout: true
